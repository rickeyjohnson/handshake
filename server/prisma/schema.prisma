// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(uuid())
  created_at       DateTime  @default(now())
  email           String    @unique
  password        String    
  name            String
  partner_id      String?   @unique
  partner         User?   @relation("UserToPartner", fields: [partner_id], references: [id])
  partnerOf       User?   @relation("UserToPartner")
  transactions    Transactions[]
  goals   Goals[]
  goal_contributions  GoalContributions[]
  is_plaid_linked Boolean   @default(false)
  is_paired   Boolean   @default(false)
}

model PairRequest {
  id                  String    @id @default(uuid())
  code                String    @unique
  initiator_user_id     String    
  status              String    @default("PENDING")
  created_at           DateTime  @default(now())  
}

model Pair {
  id        String @id @default(uuid())
  user1_id   String @unique
  user2_id   String @unique  
  paired_at  DateTime @default(now())
}

model PlaidItem {
  id            String  @id
  access_token  String  @unique
  owner_id       String  @unique  
  is_active      Boolean @default(true) 
  transaction_cursor  String?
  bank  String?
  created_at    DateTime  @default(now())
  accounts    Accounts[]
}

model Accounts {
  id        String  @id
  item_id   String
  item      PlaidItem @relation(fields: [item_id], references:[id])
  name      String?
  pair_id    String?
  user_id   String
  transactions Transactions[]
}

model Transactions {
  id              String    @id
  user_id         String
  user            User      @relation(fields:[user_id], references:[id])
  pair_id         String
  account_id      String      
  account         Accounts   @relation(fields:[account_id], references:[id])
  category        String
  date            String
  authorized_date String
  name            String
  amount          Float
  currency_code   String
  is_removed      Boolean @default(false)
}

model Goals {
  id                  String  @id @default(uuid())
  user_id   String 
  user                User  @relation(fields:[user_id], references:[id])
  pair_id             String
  title               String
  description         String?
  target  Float
  current Float
  deadline  DateTime?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  contributions GoalContributions[]
}

model GoalContributions {
  id    String    @id @default(uuid())
  goal_id     String
  goal        Goals   @relation(fields:[goal_id], references:[id])
  user_id   String
  user    User @relation(fields:[user_id], references:[id])
  amount      Float
  posted_date   DateTime
  created_at    DateTime @default(now())
}